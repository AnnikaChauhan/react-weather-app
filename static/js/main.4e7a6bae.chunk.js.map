{"version":3,"sources":["components/Weather/Weather.module.scss","components/Weather/WeatherCard/WeatherCard.module.scss","components/Weather/WeatherCard/WeatherCard.jsx","components/Weather/index.js","components/Weather/Weather.jsx","containers/App/App.js","serviceWorker.js","index.js"],"names":["module","exports","WeatherCard","state","weatherData","convertKelvinToCelsius","kelvin","celsius","Number","parseFloat","toFixed","cityID","this","props","city","weatherURL","fetch","then","response","json","setState","catch","error","console","log","className","styles","card","name","main","temp","humidity","temp_min","temp_max","Component","Weather","cities","london","bristol","rome","weathercards","Object","entries","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"oHACAA,EAAOC,QAAU,CAAC,aAAe,gC,gBCAjCD,EAAOC,QAAU,CAAC,KAAO,4B,6NCEJC,E,4MACjBC,MAAQ,CACJC,YAAa,I,EAGjBC,uBAAyB,SAACC,GACtB,IAAIC,EAAUD,EAAS,OAEvB,OADAC,EAAUC,OAAOC,WAAWF,GAASG,QAAQ,I,mEAI5B,IAAD,OACZC,EAASC,KAAKC,MAAMC,KACpBC,EAAU,6DAAyDJ,EAAzD,2CACdK,MAAMD,GACDE,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAb,GACF,EAAKgB,SAAS,CAAEhB,mBAEnBiB,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,Q,+BAIhC,OACI,6BAASG,UAAWC,IAAOC,MAElBf,KAAKT,MAAMC,YAEJ,iCACI,4CAAkBQ,KAAKT,MAAMC,YAAYwB,KAAzC,KACA,mDAAyBhB,KAAKP,uBAAuBO,KAAKT,MAAMC,YAAYyB,KAAKC,MAAjF,SACA,wCAAclB,KAAKT,MAAMC,YAAYyB,KAAKE,SAA1C,MACA,+CAAqBnB,KAAKP,uBAAuBO,KAAKT,MAAMC,YAAYyB,KAAKG,UAA7E,SACA,+CAAqBpB,KAAKP,uBAAuBO,KAAKT,MAAMC,YAAYyB,KAAKI,UAA7E,UANN,iC,GA3BeC,aCD1BC,E,4MCGXhC,MAAQ,CACJW,KAAM,CAAC,UAAU,UAAU,WAC3BsB,OAAQ,CACJC,OAAQ,UACRC,QAAS,UACTC,KAAM,Y,uDAMV,OACG,6BAASd,UAAWC,IAAOc,cAEnBC,OAAOC,QAAQ9B,KAAKT,MAAMiC,QAAQO,KAAI,SAAC7B,GACtC,OAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAK,a,GAhBfoB,aCAhBU,E,uKAEjB,OACE,yBAAKnB,UAAU,OACb,2CACA,kBAAC,EAAD,W,GALyBS,aCQbW,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxC,MAAK,SAAAyC,GACJA,EAAaC,gBAEdtC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsC,c","file":"static/js/main.4e7a6bae.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"weathercards\":\"Weather_weathercards__21ZEq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"WeatherCard_card__fy_49\"};","import React, {Component} from \"react\";\nimport styles from \"./WeatherCard.module.scss\";\n\nexport default class WeatherCard extends Component {\n    state = {\n        weatherData: \"\"\n    }\n\n    convertKelvinToCelsius = (kelvin) => {\n        let celsius = kelvin - 273.15;\n        celsius = Number.parseFloat(celsius).toFixed(2);\n        return celsius;\n    }\n\n    componentWillMount(){\n        let cityID = this.props.city;\n        let weatherURL = `https://api.openweathermap.org/data/2.5/weather?id=${cityID}&appid=0f33f5c78acf44e7d38b5f6706f6f59d`\n        fetch(weatherURL)\n            .then(response => response.json())\n            .then(weatherData => {\n                this.setState({ weatherData })\n            })\n            .catch(error => console.log(error));\n    }\n\n    render(){\n        return(\n            <section className={styles.card}>\n                {\n                    !this.state.weatherData\n                        ? <p></p>\n                        :   <article>\n                                <h1>Weather for: {this.state.weatherData.name} </h1>\n                                <p>Current Temperature: {this.convertKelvinToCelsius(this.state.weatherData.main.temp)}°C</p>\n                                <p>Humidity: {this.state.weatherData.main.humidity}% </p>\n                                <p>Min Temperature: {this.convertKelvinToCelsius(this.state.weatherData.main.temp_min)}°C</p>\n                                <p>Max Temperature: {this.convertKelvinToCelsius(this.state.weatherData.main.temp_max)}°C</p>\n                            </article>\n                }\n            </section>\n        );\n    }\n}","import Weather from \"./Weather\";\n\nexport default Weather;","import React, {Component} from \"react\";\nimport styles from \"./Weather.module.scss\";\nimport WeatherCard from \"./WeatherCard/WeatherCard\";\n\nexport default class Weather extends Component {\n    state = {\n        city: [\"2643744\",\"4749005\",\"4219762\"],\n        cities: {\n            london: \"2643744\",\n            bristol: \"4749005\",\n            rome: \"4219762\"\n        }\n    }\n\n    render(){\n        // either way of the below is good but Object.entries is beast mode\n        return(\n           <section className={styles.weathercards} >\n               {\n                   Object.entries(this.state.cities).map((city) => {\n                    return (<WeatherCard city={city[1]} />)\n                   })\n               }\n               {/* {\n                   this.state.city.map((city) => {\n                       return (<WeatherCard city={city} />)\n                   })\n               } */}\n           </section>\n        );\n    }\n}","import React, {Component} from 'react';\nimport './App.scss';\nimport Weather from \"../../components/Weather\"\n\nexport default class App extends Component {\n  render(){\n    return(\n      <div className=\"App\">\n        <h1>Weather App</h1>\n        <Weather />\n    </div>\n    );\n  }\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}